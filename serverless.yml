service: serverless-books

frameworkVersion: ">=1.28.0
 <2.0.0"

package:
  individually: true

plugins:
  - serverless-webpack
  - serverless-jest-plugin
  - serverless-dynamodb-local
  - serverless-offline

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules:
      forceExclude:
        - aws-sdk
  jest:
    collectCoverage: true
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    seed:
      test:
        sources:
          - table: ${self:provider.environment.AUTHORS_TABLE}
            sources: [./offline/seed/mock-authors.json]
          - table: ${self:provider.environment.BOOKS_TABLE}
            sources: [./offline/seed/mock-books.json]

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: eu-west-1
  memorySize: 128
  environment:
    # ${file(env.yml):${self:provider.stage}}
    AUTHORS_TABLE: Authors-${opt:stage, self:provider.stage}
    BOOKS_TABLE: Books-${opt:stage, self:provider.stage}
    AUTHOR_BOOKS_INDEX: author_books_by_year-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: "*"

functions:
  listBooks:
    handler: src/handlers/books.list
    description: List all books
    events:
      - http:
          path: books
          method: get
  # listAuthors:
  #   handler: src/handlers/authors.list
  #   description: List all authors
  #   events:
  #     - http:
  #         path: authors
  #         method: get
  listAuthorBooks:
    handler: src/handlers/books.getByAuthor
    description: List all books by specified author
    events:
      - http:
          path: books/author/{author}
          method: get
  addBook:
    handler: src/handlers/books.addBook
    description: Adds a new book
    events:
      - http:
          path: books
          method: post


resources:
  Resources:
    AuthorsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        # StreamSpecification:
        #   StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: ${self:provider.environment.AUTHORS_TABLE}
    BooksDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "id"
            AttributeType: "S"
          -
            AttributeName: "authorId"
            AttributeType: "S"
          -
            AttributeName: "year"
            AttributeType: "N"
        KeySchema:
          -
            AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        # StreamSpecification:
        #   StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: ${self:provider.environment.BOOKS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.AUTHOR_BOOKS_INDEX}
            KeySchema:
            - AttributeName: "authorId"
              KeyType: HASH
            - AttributeName: "year"
              KeyType: RANGE
            Projection:
              ProjectionType: ALL
              # NonKeyAttributes:
              #   - author
              # ProjectionType: INCLUDE
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
